/******/ (() => { // webpackBootstrap
  var __webpack_exports__ = {};
  /*!********************************************************!*\
    !*** ./resources/js/client/src/tiktok-multi-pixels.js ***!
    \********************************************************/
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
  // version 15/02
  var rootLinkTikTokPixel = "http://localhost:8000/tiktok-multi-pixels-laravel/server.php";
  var rootAppPublicTikTokPixel = "http://localhost:8000/tiktok-multi-pixels-laravel/public";
  var shop = Shopify.shop;
  var pageURL = null;
  var CONTENT_TYPE_IS_PRODUCT_GROUP = 0;
  var CONTENT_TYPE_IS_PRODUCT = 1;
  // if (typeof __st.pageurl != 'undefined') {
  //   pageURL = 'https://' + __st.pageurl;
  // } else {
  //   pageURL = window.location.href;
  // }
  pageURL = window.location.href;
  // if (pageURL.indexOf('&')) {
  //   pageURL = pageURL.split('&')[0];
  // }
  var EVENT_NAME_TOOL = {
    browse: 'Page View',
    viewContent: 'View Content',
    addToCart: 'Add to Cart',
    startCheckout: 'Initiate Checkout',
    purchase: 'Complete payment'
  };
  var user_agent = getUserAgent();
  var pageReferrer = '';
  var currency = Shopify.currency.active;
  var cart_url = '//' + window.location.hostname + '/cart.json';
  var itemInCart;
  var otElementButtonAddToCart = ".gt_button-atc,#teeAtcButton,#new-form-atc,.ProductForm__AddToCart,.single_add_to_cart_button,#AddToCartForm button,.product__form button.add-to-cart, #AddToCart-product-template,.product-form__cart-submit,[name^='add']";
  var otElementButtonCheckout = 'form[action^="/checkout"] :submit[name^="checkout"],form[action^="/checkout"] .checkout-button,.checkout_btn,.btn-checkout,.OTCheckout,[name^="checkout"],form[action^="/cart"] :submit[name^="checkout"],form[action^="/cart"] .checkout-button,#cart .action_button.right .gt_checkout_button_main';
  var ip = null;
  var ot_ttclid = null;
  !function (w, d, t) {
    w.TiktokAnalyticsObject = t;
    var ttq = w[t] = w[t] || [];
    ttq.methods = ['page', 'track', 'identify', 'instances', 'debug', 'on', 'off', 'once', 'ready', 'alias', 'group', 'enableCookie', 'disableCookie'], ttq.setAndDefer = function (t, e) {
      t[e] = function () {
        t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
      };
    };
    for (var i = 0; i < ttq.methods.length; i++) ttq.setAndDefer(ttq, ttq.methods[i]);
    ttq.instance = function (t) {
      for (var e = ttq._i[t] || [], n = 0; n < ttq.methods.length; n++) ttq.setAndDefer(e, ttq.methods[n]);
      return e;
    }, ttq.load = function (e, n) {
      var i = 'https://analytics.tiktok.com/i18n/pixel/events.js';
      ttq._i = ttq._i || {}, ttq._i[e] = [], ttq._i[e]._u = i, ttq._t = ttq._t || {}, ttq._t[e] = +new Date(), ttq._o = ttq._o || {}, ttq._o[e] = n || {};
      var o = document.createElement('script');
      o.type = 'text/javascript', o.async = !0, o.src = i + '?sdkid=' + e + '&lib=' + t;
      var a = document.getElementsByTagName('script')[0];
      a.parentNode.insertBefore(o, a);
    };
    ttq.checkOmega = function () {
      var _user_information, _user_information2, _user_information3;
      if (arguments.length > 0) {
        var oh, nh, ih, event_id;
        if (typeof arguments[0] == 'string') {
          oh = arguments[0];
        }
        if (typeof arguments[1] == 'string') {
          nh = arguments[1];
        }
        if (_typeof(arguments[2]) == 'object') {
          ih = arguments[2];
        }
        if (typeof arguments[3] == 'string') {
          event_id = arguments[3];
          console.log('event_id: ' + event_id);
        } else if (typeof event_id == 'undefined') {
          var external_id = generateExternalID(36);
          event_id = getEventID(external_id);
          console.log('Create event_id: ' + event_id);
        }
        if ('string' == typeof oh && '' != oh.replace(/\s+/gi, '') && 'string' == typeof nh && nh.replace(/\s+/gi, '')) {
          ttq.load(oh);
          ttq.page();
          // const user_infor = JSON.parse(localStorage.getItem('user_infor'))||{};
          // const {email = '', phone_number = '', external_id = ''} = user_infor;
          // ttq.instance(oh).identify({
          //   email,
          //   phone_number,
          //   external_id,
          // });
          switch (nh) {
            case 'StartCheckout':
              ttq.instance(oh).track('InitiateCheckout', ih, {
                event_id: event_id
              });
              break;
            case 'Purchase':
              var user_information = null;
              try {
                user_information = JSON.parse(localStorage.getItem('user_information')) || {};
              } catch (_unused) {}
              ttq.instance(oh).identify({
                email: (_user_information = user_information) === null || _user_information === void 0 ? void 0 : _user_information.email,
                phone_number: (_user_information2 = user_information) === null || _user_information2 === void 0 ? void 0 : _user_information2.phone_number,
                external_id: (_user_information3 = user_information) === null || _user_information3 === void 0 ? void 0 : _user_information3.external_id
              });
              ttq.instance(oh).track('CompletePayment', ih, {
                event_id: event_id
              });
              break;
            case 'ViewContent':
            case 'Search':
            case 'AddToCart':
            case 'AddPaymentInfo':
            case 'Lead':
            case 'CompleteRegistration':
            case 'Checkout':
            case 'AddToWishlist':
              ttq.instance(oh).track(nh, ih, {
                event_id: event_id
              });
              break;
            default:
              return;
          }
        }
      }
    };
  
    //part2
  }(window, document, 'ttq');
  if (typeof $ == 'undefined') {
    javascript: (function (e, s) {
      e.src = s;
      e.onload = function () {
        $ = jQuery.noConflict();
        if (typeof window.otCheckExistFileTikTokPixel === 'undefined') {
          if (!Shopify.Checkout) {
            otIncludeTrackTool();
          }
          otTikTokPixelInit($);
          window.otCheckExistFileTikTokPixel = false;
        }
      };
      document.head.appendChild(e);
    })(document.createElement('script'), 'https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js');
  } else {
    if (typeof window.otCheckExistFileTikTokPixel === 'undefined') {
      if (!Shopify.Checkout) {
        otIncludeTrackTool();
      }
      otTikTokPixelInit($);
      window.otCheckExistFileTikTokPixel = false;
    }
  }
  function otTikTokPixelInit(_x) {
    return _otTikTokPixelInit.apply(this, arguments);
  }
  function _otTikTokPixelInit() {
    _otTikTokPixelInit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3($) {
      var checkTiktokPixelExpire, settings;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!(Shopify.Checkout && Shopify.Checkout.page.indexOf('thank_you') !== -1)) {
              _context3.next = 6;
              break;
            }
            _context3.next = 3;
            return otTikTokPixelCheckExpireApp($, rootLinkTikTokPixel, shop);
          case 3:
            checkTiktokPixelExpire = _context3.sent;
            _context3.next = 7;
            break;
          case 6:
            checkTiktokPixelExpire = tikTokPixelCheckExpireApp;
          case 7:
            settings = typeof checkTiktokPixelExpire.settings !== 'undefined' ? checkTiktokPixelExpire.settings : null;
            ot_ttclid = otAddAttributeIDAds($, settings);
            if (!(!checkTiktokPixelExpire.check_expire && (settings !== null ? settings.enable == 1 : checkTiktokPixelExpire.enable_app == 1))) {
              _context3.next = 13;
              break;
            }
            _context3.next = 12;
            return getIP().then(function (data) {
              var ipRegex = /[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/;
              ip = data.match(ipRegex)[0];
            });
          case 12:
            otMultiTikTokPixel($, settings, checkTiktokPixelExpire);
          case 13:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return _otTikTokPixelInit.apply(this, arguments);
  }
  function otMultiTikTokPixel(_x2, _x3, _x4) {
    return _otMultiTikTokPixel.apply(this, arguments);
  }
  function _otMultiTikTokPixel() {
    _otMultiTikTokPixel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18($, settings, checkTiktokPixelExpire) {
      var content_type_event, enable_deduplication, _content_type, external_id, event_id, product_url, product, content_id, variant_id, _external_id, _event_id, arrayContent, productIds;
      return _regeneratorRuntime().wrap(function _callee18$(_context18) {
        while (1) switch (_context18.prev = _context18.next) {
          case 0:
            content_type_event = settings !== null ? settings.content_type_event : checkTiktokPixelExpire.content_type_event;
            enable_deduplication = settings !== null ? settings.enable_deduplication : checkTiktokPixelExpire.enable_deduplication;
            if (!(typeof arrayTikTokPixelTrackNew != 'undefined' && typeof arrayTikTokPixelCapiTrackNew != 'undefined')) {
              _context18.next = 21;
              break;
            }
            arrayTikTokPixelTrackNew.forEach( /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(element, index) {
                return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                  while (1) switch (_context4.prev = _context4.next) {
                    case 0:
                      ttq.checkOmega("".concat(element), 'PageView');
                    case 1:
                    case "end":
                      return _context4.stop();
                  }
                }, _callee4);
              }));
              return function (_x17, _x18) {
                return _ref3.apply(this, arguments);
              };
            }());
            //Detect type content_type
            _content_type = 'product_group';
            if (content_type_event == CONTENT_TYPE_IS_PRODUCT) {
              _content_type = 'product';
            }
            //Detect type content_type
  
            if (arrayTikTokPixelCapiTrackNew.length > 0) {
              external_id = generateExternalID(36);
              event_id = getEventID(external_id); // trackEventsAPITikTok($, {
              //   action: 'Browse',
              //   event: 'Browse',
              //   eventShowTool: EVENT_NAME_TOOL.browse,
              //   event_id: event_id,
              //   url: pageURL,
              //   pixel_ids: arrayTikTokPixelCapiTrackNew,
              //   shop: Shopify.shop,
              //   ip: ip !== null ? ip : '',
              //   user_agent: user_agent,
              //   content_type: content_type,
              //   ttclid: ot_ttclid,
              // });
              if (enable_deduplication == 1) {
                arrayTikTokPixelCapiTrackNew.forEach( /*#__PURE__*/function () {
                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(element, index) {
                    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                      while (1) switch (_context5.prev = _context5.next) {
                        case 0:
                          ttq.checkOmega("".concat(element), 'PageView', event_id);
                        case 1:
                        case "end":
                          return _context5.stop();
                      }
                    }, _callee5);
                  }));
                  return function (_x19, _x20) {
                    return _ref4.apply(this, arguments);
                  };
                }());
              }
            }
            if (!(pageURL.indexOf('/products/') > -1)) {
              _context18.next = 18;
              break;
            }
            // add event ViewContent
            if (pageURL.indexOf('?') > -1) {
              product_url = pageURL.split('?');
              product_url = product_url[0] + '.json';
            } else {
              product_url = pageURL + '.json';
            }
            _context18.next = 11;
            return otGetInfoProductByLink(product_url, $);
          case 11:
            product = _context18.sent;
            if (product.title.indexOf("'") > -1) {
              product.title = product.title.replace(/'/g, '');
            }
  
            //Detect type content_type
            content_id = typeof product.id !== 'undefined' ? product.id : meta.product.id;
            variant_id = ot_getUrlParam('variant');
            if (content_type_event == CONTENT_TYPE_IS_PRODUCT) {
              content_id = variant_id !== null ? variant_id : meta.product.variants[0].id;
            }
            //Detect type content_type
  
            arrayTikTokPixelTrackNew.forEach( /*#__PURE__*/function () {
              var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(element, index) {
                return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                  while (1) switch (_context6.prev = _context6.next) {
                    case 0:
                      ttq.checkOmega("".concat(element), 'ViewContent', {
                        content_id: "".concat(content_id),
                        content_type: _content_type,
                        value: otConvertPrice(product.variants[0].price),
                        content_name: "".concat(product.title),
                        currency: "".concat(currency)
                      });
                    case 1:
                    case "end":
                      return _context6.stop();
                  }
                }, _callee6);
              }));
              return function (_x21, _x22) {
                return _ref5.apply(this, arguments);
              };
            }());
            if (arrayTikTokPixelCapiTrackNew.length > 0) {
              _external_id = generateExternalID(36);
              _event_id = getEventID(_external_id);
              trackEventsAPITikTok($, {
                action: 'ViewContent',
                event: 'ViewContent',
                eventShowTool: EVENT_NAME_TOOL.viewContent,
                event_id: _event_id,
                url: pageURL,
                pixel_ids: arrayTikTokPixelCapiTrackNew,
                shop: Shopify.shop,
                ip: ip !== null ? ip : '',
                user_agent: user_agent,
                value: otConvertPrice(product.variants[0].price),
                content_name: "".concat(product.title),
                currency: "".concat(currency),
                content_id: "".concat(content_id),
                content_type: _content_type,
                ttclid: ot_ttclid
              });
              if (enable_deduplication == 1) {
                arrayTikTokPixelCapiTrackNew.forEach( /*#__PURE__*/function () {
                  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(element, index) {
                    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                      while (1) switch (_context7.prev = _context7.next) {
                        case 0:
                          ttq.checkOmega("".concat(element), 'ViewContent', {
                            content_id: "".concat(content_id),
                            content_type: _content_type,
                            value: otConvertPrice(product.variants[0].price),
                            content_name: "".concat(product.title),
                            currency: "".concat(currency)
                          }, _event_id);
                        case 1:
                        case "end":
                          return _context7.stop();
                      }
                    }, _callee7);
                  }));
                  return function (_x23, _x24) {
                    return _ref6.apply(this, arguments);
                  };
                }());
              }
            }
          case 18:
            if (pageURL.indexOf('/cart') > -1) {
              getItemOnCartPage($, function (cart) {
                itemInCart = cart;
                var items = cart.items;
                var lastItem = items[items.length - 1];
                var totalItemCart = localStorage.getItem('OTPX');
                var checkAddedOnProductPage = localStorage.getItem('OTPXADDED');
                if ((totalItemCart != cart.item_count || totalItemCart == null) && checkAddedOnProductPage != 1) {
                  localStorage.setItem('OTPXADDED', 0);
                  localStorage.setItem('OTPX', cart.item_count);
  
                  //Detect type content_type
                  var _content_id = lastItem['product_id'];
                  if (content_type_event == CONTENT_TYPE_IS_PRODUCT) {
                    _content_id = lastItem['variant_id'];
                  }
                  //Detect type content_type
  
                  arrayTikTokPixelTrackNew.forEach( /*#__PURE__*/function () {
                    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(element, index) {
                      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                        while (1) switch (_context8.prev = _context8.next) {
                          case 0:
                            ttq.checkOmega("".concat(element), 'AddToCart', {
                              content_id: "".concat(_content_id),
                              content_type: _content_type,
                              value: otConvertPrice(parseInt(cart.total_price) / 100),
                              content_name: "".concat(lastItem['product_title']),
                              currency: "".concat(currency)
                            });
                          case 1:
                          case "end":
                            return _context8.stop();
                        }
                      }, _callee8);
                    }));
                    return function (_x25, _x26) {
                      return _ref7.apply(this, arguments);
                    };
                  }());
                  if (arrayTikTokPixelCapiTrackNew.length > 0) {
                    var _external_id2 = generateExternalID(36);
                    var _event_id2 = getEventID(_external_id2);
                    trackEventsAPITikTok($, {
                      action: 'AddToCart',
                      event: 'AddToCart',
                      eventShowTool: EVENT_NAME_TOOL.addToCart,
                      event_id: _event_id2,
                      url: pageURL,
                      pixel_ids: arrayTikTokPixelCapiTrackNew,
                      shop: Shopify.shop,
                      ip: ip !== null ? ip : '',
                      user_agent: user_agent,
                      content_id: "".concat(_content_id),
                      content_type: _content_type,
                      value: otConvertPrice(parseInt(cart.total_price) / 100),
                      currency: "".concat(currency),
                      ttclid: ot_ttclid
                    });
                    if (enable_deduplication == 1) {
                      arrayTikTokPixelCapiTrackNew.forEach( /*#__PURE__*/function () {
                        var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(element, index) {
                          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                            while (1) switch (_context9.prev = _context9.next) {
                              case 0:
                                ttq.checkOmega("".concat(element), 'AddToCart', {
                                  content_id: "".concat(_content_id),
                                  content_type: _content_type,
                                  value: otConvertPrice(parseInt(cart.total_price) / 100),
                                  content_name: "".concat(lastItem['product_title']),
                                  currency: "".concat(currency)
                                }, _event_id2);
                              case 1:
                              case "end":
                                return _context9.stop();
                            }
                          }, _callee9);
                        }));
                        return function (_x27, _x28) {
                          return _ref8.apply(this, arguments);
                        };
                      }());
                    }
                  }
                }
              });
            }
            // add event AddToCart
            $(otElementButtonAddToCart).click(function (e) {
              setTimeout(function () {
                $.ajax({
                  type: 'GET',
                  url: '/cart.js',
                  dataType: 'json'
                }).done(function (cart) {
                  localStorage.setItem('OTPXADDED', 1);
                  if (cart.items.length > 0) {
                    var lastItem = cart.items[0];
  
                    //Detect type content_type
                    var _content_id2 = lastItem['product_id'];
                    if (content_type_event == CONTENT_TYPE_IS_PRODUCT) {
                      _content_id2 = lastItem['variant_id'];
                    }
                    //Detect type content_type
  
                    arrayTikTokPixelTrackNew.forEach( /*#__PURE__*/function () {
                      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(element, index) {
                        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                          while (1) switch (_context10.prev = _context10.next) {
                            case 0:
                              ttq.checkOmega("".concat(element), 'AddToCart', {
                                content_id: "".concat(_content_id2),
                                content_type: _content_type,
                                value: otConvertPrice(parseInt(cart.total_price) / 100),
                                content_name: "".concat(lastItem['product_title']),
                                currency: "".concat(currency)
                              });
                            case 1:
                            case "end":
                              return _context10.stop();
                          }
                        }, _callee10);
                      }));
                      return function (_x29, _x30) {
                        return _ref9.apply(this, arguments);
                      };
                    }());
                    if (arrayTikTokPixelCapiTrackNew.length > 0) {
                      var _external_id3 = generateExternalID(36);
                      var _event_id3 = getEventID(_external_id3);
                      trackEventsAPITikTok($, {
                        action: 'AddToCart',
                        event: 'AddToCart',
                        eventShowTool: EVENT_NAME_TOOL.addToCart,
                        event_id: _event_id3,
                        url: pageURL,
                        pixel_ids: arrayTikTokPixelCapiTrackNew,
                        shop: Shopify.shop,
                        ip: ip !== null ? ip : '',
                        user_agent: user_agent,
                        content_id: "".concat(_content_id2),
                        content_type: _content_type,
                        value: otConvertPrice(parseInt(cart.total_price) / 100),
                        currency: "".concat(currency),
                        ttclid: ot_ttclid
                      });
                      if (enable_deduplication == 1) {
                        arrayTikTokPixelCapiTrackNew.forEach( /*#__PURE__*/function () {
                          var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(element, index) {
                            return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                              while (1) switch (_context11.prev = _context11.next) {
                                case 0:
                                  ttq.checkOmega("".concat(element), 'AddToCart', {
                                    content_id: "".concat(_content_id2),
                                    content_type: _content_type,
                                    value: otConvertPrice(parseInt(cart.total_price) / 100),
                                    content_name: "".concat(lastItem['product_title']),
                                    currency: "".concat(currency)
                                  }, _event_id3);
                                case 1:
                                case "end":
                                  return _context11.stop();
                              }
                            }, _callee11);
                          }));
                          return function (_x31, _x32) {
                            return _ref10.apply(this, arguments);
                          };
                        }());
                      }
                    }
                  } else {
                    if (typeof meta.product != 'undefined') {
                      //Detect type content_type
                      var _content_id3 = meta.product.id;
                      var _variant_id = ot_getUrlParam('variant');
                      if (content_type_event == CONTENT_TYPE_IS_PRODUCT) {
                        _content_id3 = _variant_id !== null ? _variant_id : meta.product.variants[0].id;
                      }
                      //Detect type content_type
  
                      arrayTikTokPixelTrackNew.forEach( /*#__PURE__*/function () {
                        var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(element, index) {
                          return _regeneratorRuntime().wrap(function _callee12$(_context12) {
                            while (1) switch (_context12.prev = _context12.next) {
                              case 0:
                                ttq.checkOmega("".concat(element), 'AddToCart', {
                                  content_id: "".concat(_content_id3),
                                  content_type: _content_type,
                                  value: otConvertPrice(parseInt(meta.product.variants[0]['price']) / 100),
                                  content_name: "".concat(meta.product.variants[0]['name']),
                                  currency: "".concat(currency)
                                });
                              case 1:
                              case "end":
                                return _context12.stop();
                            }
                          }, _callee12);
                        }));
                        return function (_x33, _x34) {
                          return _ref11.apply(this, arguments);
                        };
                      }());
                      if (arrayTikTokPixelCapiTrackNew.length > 0) {
                        var _external_id4 = generateExternalID(36);
                        var _event_id4 = getEventID(_external_id4);
                        trackEventsAPITikTok($, {
                          action: 'AddToCart',
                          event: 'AddToCart',
                          eventShowTool: EVENT_NAME_TOOL.addToCart,
                          event_id: _event_id4,
                          url: pageURL,
                          pixel_ids: arrayTikTokPixelCapiTrackNew,
                          shop: Shopify.shop,
                          ip: ip !== null ? ip : '',
                          user_agent: user_agent,
                          content_id: "".concat(_content_id3),
                          content_type: _content_type,
                          value: otConvertPrice(parseInt(meta.product.variants[0]['price']) / 100),
                          currency: "".concat(currency),
                          ttclid: ot_ttclid
                        });
                        if (enable_deduplication == 1) {
                          arrayTikTokPixelCapiTrackNew.forEach( /*#__PURE__*/function () {
                            var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(element, index) {
                              return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                                while (1) switch (_context13.prev = _context13.next) {
                                  case 0:
                                    ttq.checkOmega("".concat(element), 'AddToCart', {
                                      content_id: "".concat(_content_id3),
                                      content_type: _content_type,
                                      value: otConvertPrice(parseInt(meta.product.variants[0]['price']) / 100),
                                      content_name: "".concat(meta.product.variants[0]['name']),
                                      currency: "".concat(currency)
                                    }, _event_id4);
                                  case 1:
                                  case "end":
                                    return _context13.stop();
                                }
                              }, _callee13);
                            }));
                            return function (_x35, _x36) {
                              return _ref12.apply(this, arguments);
                            };
                          }());
                        }
                      }
                    } else {
                      setTimeout(function () {
                        omegaTiktokCallbackAtc();
                      }, 1500);
                    }
                  }
                });
              }, 500);
            });
  
            // add event Checkout
            $('body').on('click', otElementButtonCheckout, function (e) {
              if (typeof itemInCart != 'undefined' && typeof itemInCart.items != 'undefined') {
                var cart = itemInCart;
                if (cart.items.length > 0) {
                  var arrayContent = [];
                  $.each(cart.items, function (index, value) {
                    //Detect type content_type
                    var content_id = value.product_id;
                    if (content_type_event == CONTENT_TYPE_IS_PRODUCT) {
                      content_id = value.variant_id;
                    }
                    //Detect type content_type
  
                    arrayContent.push({
                      content_id: "".concat(content_id),
                      content_type: _content_type,
                      content_name: value.product_title,
                      quantity: value.quantity,
                      price: otConvertPrice(value.final_price)
                    });
                  });
                  arrayTikTokPixelTrackNew.forEach( /*#__PURE__*/function () {
                    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(element, index) {
                      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
                        while (1) switch (_context14.prev = _context14.next) {
                          case 0:
                            ttq.checkOmega("".concat(element), 'StartCheckout', {
                              contents: arrayContent,
                              currency: "".concat(currency),
                              value: otConvertPrice(cart.total_price / 100)
                            });
                          case 1:
                          case "end":
                            return _context14.stop();
                        }
                      }, _callee14);
                    }));
                    return function (_x37, _x38) {
                      return _ref13.apply(this, arguments);
                    };
                  }());
                  if (arrayTikTokPixelCapiTrackNew.length > 0) {
                    var _external_id5 = generateExternalID(36);
                    var _event_id5 = getEventID(_external_id5);
                    trackEventsAPITikTok($, {
                      action: 'StartCheckout',
                      event: 'StartCheckout',
                      eventShowTool: EVENT_NAME_TOOL.startCheckout,
                      event_id: _event_id5,
                      url: pageURL,
                      pixel_ids: arrayTikTokPixelCapiTrackNew,
                      shop: Shopify.shop,
                      ip: ip !== null ? ip : '',
                      user_agent: user_agent,
                      contents: arrayContent,
                      currency: "".concat(currency),
                      value: otConvertPrice(cart.total_price / 100),
                      ttclid: ot_ttclid
                    });
                    if (enable_deduplication == 1) {
                      arrayTikTokPixelCapiTrackNew.forEach( /*#__PURE__*/function () {
                        var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(element, index) {
                          return _regeneratorRuntime().wrap(function _callee15$(_context15) {
                            while (1) switch (_context15.prev = _context15.next) {
                              case 0:
                                ttq.checkOmega("".concat(element), 'StartCheckout', {
                                  contents: arrayContent,
                                  currency: "".concat(currency),
                                  value: otConvertPrice(cart.total_price / 100)
                                }, _event_id5);
                              case 1:
                              case "end":
                                return _context15.stop();
                            }
                          }, _callee15);
                        }));
                        return function (_x39, _x40) {
                          return _ref14.apply(this, arguments);
                        };
                      }());
                    }
                  }
                }
              } else {
                $.ajax({
                  type: 'GET',
                  url: '/cart.js',
                  dataType: 'json'
                }).done(function (cart) {
                  if (cart.items.length > 0) {
                    var _arrayContent = [];
                    $.each(cart.items, function (index, value) {
                      //Detect type content_type
                      var content_id = value.product_id;
                      if (content_type_event == CONTENT_TYPE_IS_PRODUCT) {
                        content_id = value.variant_id;
                      }
                      //Detect type content_type
  
                      _arrayContent.push({
                        content_id: "".concat(content_id),
                        content_type: _content_type,
                        content_name: value.product_title,
                        quantity: value.quantity,
                        price: otConvertPrice(value.final_price)
                      });
                    });
                    arrayTikTokPixelTrackNew.forEach( /*#__PURE__*/function () {
                      var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(element, index) {
                        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
                          while (1) switch (_context16.prev = _context16.next) {
                            case 0:
                              ttq.checkOmega("".concat(element), 'StartCheckout', {
                                contents: _arrayContent,
                                currency: "".concat(currency),
                                value: otConvertPrice(cart.total_price / 100)
                              });
                            case 1:
                            case "end":
                              return _context16.stop();
                          }
                        }, _callee16);
                      }));
                      return function (_x41, _x42) {
                        return _ref15.apply(this, arguments);
                      };
                    }());
                    if (arrayTikTokPixelCapiTrackNew.length > 0) {
                      var _external_id6 = generateExternalID(36);
                      var _event_id6 = getEventID(_external_id6);
                      trackEventsAPITikTok($, {
                        action: 'StartCheckout',
                        event: 'StartCheckout',
                        eventShowTool: EVENT_NAME_TOOL.startCheckout,
                        event_id: _event_id6,
                        url: pageURL,
                        pixel_ids: arrayTikTokPixelCapiTrackNew,
                        shop: Shopify.shop,
                        ip: ip !== null ? ip : '',
                        user_agent: user_agent,
                        contents: _arrayContent,
                        currency: "".concat(currency),
                        value: otConvertPrice(cart.total_price / 100),
                        ttclid: ot_ttclid
                      });
                      if (enable_deduplication == 1) {
                        arrayTikTokPixelCapiTrackNew.forEach( /*#__PURE__*/function () {
                          var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(element, index) {
                            return _regeneratorRuntime().wrap(function _callee17$(_context17) {
                              while (1) switch (_context17.prev = _context17.next) {
                                case 0:
                                  ttq.checkOmega("".concat(element), 'StartCheckout', {
                                    contents: _arrayContent,
                                    currency: "".concat(currency),
                                    value: otConvertPrice(cart.total_price / 100)
                                  }, _event_id6);
                                case 1:
                                case "end":
                                  return _context17.stop();
                              }
                            }, _callee17);
                          }));
                          return function (_x43, _x44) {
                            return _ref16.apply(this, arguments);
                          };
                        }());
                      }
                    }
                  }
                }).fail(function (jqXHR, textStatus) {});
              }
            });
          case 21:
            if (Shopify.Checkout && Shopify.Checkout.page.indexOf('thank_you') !== -1) {
              arrayContent = [];
              productIds = [];
              Shopify.checkout.line_items.forEach(function (item, index) {
                if (item.variant_title != '') {
                  var prod_name = item.title + ' - ' + item.variant_title;
                } else {
                  var prod_name = item.title;
                }
                productIds.push(item.product_id);
  
                //Detect type content_type
                var content_type = 'product_group';
                var content_id = item.product_id;
                if (content_type_event == CONTENT_TYPE_IS_PRODUCT) {
                  content_id = item.variant_id;
                  content_type = 'product';
                }
                //Detect type content_type
  
                arrayContent.push({
                  content_id: "".concat(content_id),
                  content_type: content_type,
                  content_name: prod_name,
                  quantity: item.quantity,
                  price: otConvertPrice(item.price)
                });
              });
              addEventPurchaseInThankYouPageTikTok($, arrayContent, productIds, enable_deduplication, settings);
            }
          case 22:
          case "end":
            return _context18.stop();
        }
      }, _callee18);
    }));
    return _otMultiTikTokPixel.apply(this, arguments);
  }
  function getItemOnCartPage($, callback) {
    $.ajax({
      type: 'GET',
      url: '/cart.js',
      dataType: 'json'
    }).done(function (cart) {
      if (typeof callback == 'function') {
        callback(cart);
      }
    });
  }
  function otTikTokPixelCheckExpireApp($, rootLinkTikTokPixel, shop) {
    'use strict';
  
    return new Promise(function (resolve) {
      $.ajax({
        type: 'GET',
        data: {
          shop: shop
        },
        url: "".concat(rootLinkTikTokPixel, "/api/external/check-expire"),
        dataType: 'json'
      }).done(function (result) {
        resolve(result.data);
      });
    });
  }
  function omegaTiktokCallbackAtc() {
    $.ajax({
      type: 'GET',
      url: '/cart.js',
      dataType: 'json'
    }).done(function (cart) {
      localStorage.setItem('OTPXADDED', 1);
      if (cart.items.length > 0) {
        var lastItem = cart.items[0];
  
        //Detect type content_type
        var content_id = lastItem['product_id'];
        if (content_type_event == CONTENT_TYPE_IS_PRODUCT) {
          content_id = lastItem['variant_id'];
        }
        //Detect type content_type
  
        arrayTikTokPixelTrackNew.forEach( /*#__PURE__*/function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(element, index) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  ttq.checkOmega("".concat(element), 'AddToCart', {
                    content_id: "".concat(content_id),
                    content_type: content_type,
                    value: otConvertPrice(parseInt(cart.total_price) / 100),
                    content_name: "".concat(lastItem['product_title']),
                    currency: "".concat(currency)
                  });
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          return function (_x5, _x6) {
            return _ref.apply(this, arguments);
          };
        }());
        if (arrayTikTokPixelCapiTrackNew.length > 0) {
          var external_id = generateExternalID(36);
          var event_id = getEventID(external_id);
          trackEventsAPITikTok($, {
            action: 'AddToCart',
            event: 'AddToCart',
            eventShowTool: EVENT_NAME_TOOL.addToCart,
            event_id: event_id,
            url: pageURL,
            pixel_ids: arrayTikTokPixelCapiTrackNew,
            shop: Shopify.shop,
            ip: ip !== null ? ip : '',
            user_agent: user_agent,
            content_id: "".concat(content_id),
            content_type: content_type,
            value: otConvertPrice(parseInt(cart.total_price) / 100),
            currency: "".concat(currency),
            ttclid: ot_ttclid
          });
          if (enable_deduplication == 1) {
            arrayTikTokPixelCapiTrackNew.forEach( /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(element, index) {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      ttq.checkOmega("".concat(element), 'AddToCart', {
                        content_id: "".concat(content_id),
                        content_type: content_type,
                        value: otConvertPrice(parseInt(cart.total_price) / 100),
                        content_name: "".concat(lastItem['product_title']),
                        currency: "".concat(currency)
                      }, event_id);
                    case 1:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2);
              }));
              return function (_x7, _x8) {
                return _ref2.apply(this, arguments);
              };
            }());
          }
        }
      }
    });
  }
  function addEventPurchaseInThankYouPageTikTok(_x9, _x10, _x11, _x12, _x13) {
    return _addEventPurchaseInThankYouPageTikTok.apply(this, arguments);
  }
  function _addEventPurchaseInThankYouPageTikTok() {
    _addEventPurchaseInThankYouPageTikTok = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21($, arrayContent, productIds, enable_deduplication, settings) {
      var results, pixels, pixelsCapi, orderValue, external_id, event_id;
      return _regeneratorRuntime().wrap(function _callee21$(_context21) {
        while (1) switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return getAllTikTokPixelInThankYouPage(productIds);
          case 2:
            results = _context21.sent;
            if (typeof results['pixels'] !== 'undefined' && typeof results['pixelsCapi'] !== 'undefined') {
              window.arrayTikTokPixelCapiTrackNew = results['pixelsCapi'];
              window.arrayTikTokPixel = results['pixelCapi_information'];
              otIncludeTrackTool();
              pixels = results['pixels'];
              pixelsCapi = results['pixelsCapi'];
              if (settings.include_shippping_cost) {
                orderValue = Shopify.checkout.total_price;
              } else {
                orderValue = Shopify.checkout.subtotal_price;
              }
              if (pixels.length > 0) {
                pixels.forEach( /*#__PURE__*/function () {
                  var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(element, index) {
                    return _regeneratorRuntime().wrap(function _callee19$(_context19) {
                      while (1) switch (_context19.prev = _context19.next) {
                        case 0:
                          ttq.checkOmega("".concat(element), 'Purchase', {
                            contents: arrayContent,
                            currency: "".concat(currency),
                            value: otConvertPrice(orderValue)
                          });
                        case 1:
                        case "end":
                          return _context19.stop();
                      }
                    }, _callee19);
                  }));
                  return function (_x45, _x46) {
                    return _ref17.apply(this, arguments);
                  };
                }());
              }
              if (pixelsCapi.length > 0) {
                external_id = generateExternalID(36);
                event_id = Shopify.checkout.order_id;
                getInformationCustomerHash(Shopify, external_id).then(function (user_infomartion) {
                  try {
                    localStorage.setItem("user_information", JSON.stringify(user_infomartion));
                  } catch (_unused2) {}
                  trackEventsAPITikTok($, {
                    action: 'Purchase',
                    event: 'Purchase',
                    eventShowTool: EVENT_NAME_TOOL.purchase,
                    event_id: event_id,
                    url: pageURL,
                    pixel_ids: pixelsCapi,
                    shop: Shopify.shop,
                    ip: ip !== null ? ip : '',
                    user_agent: user_agent,
                    contents: arrayContent,
                    currency: "".concat(currency),
                    value: otConvertPrice(orderValue),
                    user: user_infomartion,
                    order_id: Shopify.checkout.order_id,
                    ttclid: ot_ttclid
                  });
                  if (enable_deduplication == 1) {
                    pixelsCapi.forEach( /*#__PURE__*/function () {
                      var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(element, index) {
                        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
                          while (1) switch (_context20.prev = _context20.next) {
                            case 0:
                              ttq.checkOmega("".concat(element), 'Purchase', {
                                contents: arrayContent,
                                currency: "".concat(currency),
                                value: otConvertPrice(orderValue)
                              }, event_id.toString());
                            case 1:
                            case "end":
                              return _context20.stop();
                          }
                        }, _callee20);
                      }));
                      return function (_x47, _x48) {
                        return _ref18.apply(this, arguments);
                      };
                    }());
                  }
                });
              }
            }
          case 4:
          case "end":
            return _context21.stop();
        }
      }, _callee21);
    }));
    return _addEventPurchaseInThankYouPageTikTok.apply(this, arguments);
  }
  function getAllTikTokPixelInThankYouPage(productIDs) {
    return new Promise(function (resolve) {
      $.ajax({
        type: 'GET',
        data: {
          product_ids: productIDs,
          shop: shop
        },
        url: "".concat(rootLinkTikTokPixel, "/api/external/pixels/purchase"),
        dataType: 'json'
      }).done(function (result) {
        if (typeof result == 'string') {
          result = JSON.parse(result);
        }
        resolve(result.data);
      });
    });
  }
  function otGetInfoProductByLink(URL, $) {
    return new Promise(function (resolve) {
      $.ajax({
        url: URL,
        dataType: 'jsonp',
        header: {
          'Access-Control-Allow-Origin': '*'
        },
        success: function success(responseData) {
          if (typeof responseData == 'string') {
            responseData = JSON.parse(responseData);
          }
          resolve(responseData.product);
        }
      });
    });
  }
  Shopify.formatMoney = function (cents, format) {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = format || this.money_format;
    function defaultOption(opt, def) {
      return typeof opt == 'undefined' ? def : opt;
    }
    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal = defaultOption(decimal, '.');
      if (isNaN(number) || number == null) {
        return 0;
      }
      number = (number / 100.0).toFixed(precision);
      var parts = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents = parts[1] ? decimal + parts[1] : '';
      return dollars + cents;
    }
    switch (formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
    return formatString.replace(placeholderRegex, value);
  };
  function trackEventsAPITikTok($, data) {
    if (data.action !== 'Purchase' && data.shop !== 'sapphire-online.myshopify.com') {
      $.ajax({
        url: "".concat(rootLinkTikTokPixel, "/api/external/events-api"),
        type: 'POST',
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        data: JSON.stringify(data)
      }).done(function (response) {
        conditionShowTestTool($, data, response);
      }).fail(function (error) {
        console.log(error);
      });
    } else {
      if (Shopify.shop == 'viralclothingworld.myshopify.com') {
        $.ajax({
          url: "".concat(rootLinkTikTokPixel, "/api/external/events-api"),
          type: 'POST',
          contentType: 'application/json; charset=utf-8',
          dataType: 'json',
          data: JSON.stringify(data)
        }).done(function (response) {
          conditionShowTestTool($, data, response);
        }).fail(function (error) {
          console.log(error);
        });
      } else {
        conditionShowTestTool($, data, {
          code: 200
        });
      }
    }
  }
  function conditionShowTestTool($, data, response) {
    if (sessionStorage.getItem('OT_TIKTOK_TRACK_TOOL_EVENT_API') == 'show' || ot_getUrlParam('otEnableTrackTool') == '1') {
      data.pixel_ids.forEach(function (pixel) {
        var time = new Date().getTime();
        var specific_dom = data.event + '-' + pixel + '-' + time;
        var objDomDetect = {
          domCardPixelTrack: '#ot-card-pixel-' + pixel,
          domTitlePixelTrack: '#ot-title-pixel-' + pixel,
          domAttributePixelTrack: 'ot-attribute-event-' + specific_dom,
          domInformationEventStatus: 'ot-information-event-status-' + specific_dom,
          domSvgLeft: 'ot-svg-left' + specific_dom,
          domSvgDown: 'ot-svg-down-' + specific_dom
        };
        var checkToolAlreadyExists = setInterval(function () {
          if ($(objDomDetect.domCardPixelTrack).length) {
            otAppendEventInformation($, objDomDetect, response, data);
            clearInterval(checkToolAlreadyExists);
          }
        }, 100);
      });
    }
  }
  function getIP() {
    return fetch('https://www.cloudflare.com/cdn-cgi/trace').then(function (res) {
      return res.text();
    });
  }
  function generateExternalID(length) {
    var a = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'.split('');
    var b = [];
    for (var i = 0; i < length; i++) {
      var j = (Math.random() * (a.length - 1)).toFixed(0);
      b[i] = a[j];
    }
    return b.join('');
  }
  function getInformationCustomerHash(_x14, _x15) {
    return _getInformationCustomerHash.apply(this, arguments);
  }
  function _getInformationCustomerHash() {
    _getInformationCustomerHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(Shopify, external_id) {
      var externalID, email, phone, obj;
      return _regeneratorRuntime().wrap(function _callee22$(_context22) {
        while (1) switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return sha256(external_id);
          case 2:
            externalID = _context22.sent;
            if (!(Shopify.checkout.email == null)) {
              _context22.next = 7;
              break;
            }
            _context22.t0 = null;
            _context22.next = 10;
            break;
          case 7:
            _context22.next = 9;
            return sha256(Shopify.checkout.email);
          case 9:
            _context22.t0 = _context22.sent;
          case 10:
            email = _context22.t0;
            phone = null;
            if (!(Shopify.checkout.phone == null)) {
              _context22.next = 30;
              break;
            }
            if (!(Shopify.checkout.billing_address.phone != null)) {
              _context22.next = 19;
              break;
            }
            _context22.next = 16;
            return sha256(Shopify.checkout.billing_address.phone);
          case 16:
            phone = _context22.sent;
            _context22.next = 28;
            break;
          case 19:
            if (!(Shopify.checkout.shipping_address.phone != null)) {
              _context22.next = 25;
              break;
            }
            _context22.next = 22;
            return sha256(Shopify.checkout.shipping_address.phone);
          case 22:
            phone = _context22.sent;
            _context22.next = 28;
            break;
          case 25:
            _context22.next = 27;
            return sha256(null);
          case 27:
            phone = _context22.sent;
          case 28:
            _context22.next = 33;
            break;
          case 30:
            _context22.next = 32;
            return sha256(Shopify.checkout.phone);
          case 32:
            phone = _context22.sent;
          case 33:
            obj = {
              external_id: externalID,
              email: email,
              phone_number: phone
            };
            return _context22.abrupt("return", obj);
          case 35:
          case "end":
            return _context22.stop();
        }
      }, _callee22);
    }));
    return _getInformationCustomerHash.apply(this, arguments);
  }
  function getEventID(external_id) {
    return external_id + '_' + randomStringNumber();
  }
  function randomStringNumber() {
    var characters = '0123456789';
    var randstring = '';
    for (var i = 0; i < 10; i++) {
      randstring += characters[Math.floor(Math.random() * 9)];
    }
    return randstring;
  }
  function sha256(_x16) {
    return _sha.apply(this, arguments);
  }
  function _sha() {
    _sha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(message) {
      var msgBuffer, hashBuffer, hashArray;
      return _regeneratorRuntime().wrap(function _callee23$(_context23) {
        while (1) switch (_context23.prev = _context23.next) {
          case 0:
            msgBuffer = new TextEncoder('utf-8').encode(message.toLowerCase().trim());
            _context23.next = 3;
            return crypto.subtle.digest('SHA-256', msgBuffer);
          case 3:
            hashBuffer = _context23.sent;
            hashArray = Array.from(new Uint8Array(hashBuffer));
            return _context23.abrupt("return", hashArray.map(function (b) {
              return ('00' + b.toString(16)).slice(-2);
            }).join(''));
          case 6:
          case "end":
            return _context23.stop();
        }
      }, _callee23);
    }));
    return _sha.apply(this, arguments);
  }
  function getUserAgent() {
    return window.navigator.userAgent;
  }
  function ot_getUrlParam(paramName) {
    var match = window.location.search.match('[?&]' + paramName + '(?:&|$|=([^&]*))');
    return match ? match[1] ? match[1] : '' : null;
  }
  function otIncludeTrackTool() {
    //Check enable track tool
    var version = new Date().getTime();
    if (sessionStorage.getItem('OT_TIKTOK_TRACK_TOOL_EVENT_API') == 'show' || ot_getUrlParam('otEnableTrackTool') == '1') {
      sessionStorage.setItem('OT_TIKTOK_TRACK_TOOL_EVENT_API', 'show');
      $.getScript("".concat(rootAppPublicTikTokPixel, "/js/tiktok-track-tool.js?v=").concat(version));
    }
  }
  function otAddAttributeIDAds($, settings) {
    var is_accept_permission_write_orders = settings !== null ? settings.is_accept_permission_write_orders : 0;
    var ttclid_in_session = otGetCookie('ttclid');
    var ttclid_in_url = ot_getUrlParam('ttclid');
    var ttclid_in_local_storage = localStorage.getItem('ttclid');
    if (isJsonString(ttclid_in_local_storage) && ttclid_in_local_storage != null && ttclid_in_local_storage != 'null') {
      //delete if expire ttclid
      var oldDateTime = JSON.parse(ttclid_in_local_storage).time;
      var currentDateTime = new Date().getTime();
      if (otGetDayOfTime(oldDateTime, currentDateTime) >= 8) {
        window.localStorage.removeItem('ttclid');
      }
    }
    if (ttclid_in_url != null) {
      //check in url
      otSetCookie('ttclid', ttclid_in_url, 6);
      window.localStorage.setItem('ttclid', JSON.stringify({
        time: new Date().getTime(),
        ttclid: ttclid_in_url
      }));
      otAddAttributeClickIdToOrder($, ttclid_in_url, is_accept_permission_write_orders);
      return ttclid_in_url;
    } else if (ttclid_in_session != '') {
      //check in cookie
      otAddAttributeClickIdToOrder($, ttclid_in_session, is_accept_permission_write_orders);
      return ttclid_in_session;
    } else if (ttclid_in_local_storage != null && ttclid_in_local_storage != 'null' && isJsonString(ttclid_in_local_storage)) {
      //check in localStorage
      var temp_ttclid = JSON.parse(ttclid_in_local_storage).ttclid;
      otAddAttributeClickIdToOrder($, temp_ttclid, is_accept_permission_write_orders);
      return temp_ttclid;
    } else {
      return null;
    }
  }
  function otAppendEventInformation($, objDomDetect, response, data) {
    $(objDomDetect.domCardPixelTrack).append("<div>\n        <div class = \"ot-information-event-status\" id = \"".concat(objDomDetect.domInformationEventStatus, "\">\n          <div class = \"ot-box-title-event-status\">\n            ").concat(response.code == 200 ? window.OT_SVG_TIKTOK.ot_svg_tick : window.OT_SVG_TIKTOK.ot_svg_error, "\n            <span class = \"ot-title-event\">").concat(data.eventShowTool, "</span>\n          </div>\n          <div style=\"padding: 13px 10px 0px 10px; display: block\" id =\"").concat(objDomDetect.domSvgLeft, "\">\n            ").concat(window.OT_SVG_TIKTOK.ot_svg_arrow_left, "\n          </div>\n          <div style=\"padding: 13px 10px 0px 10px; display: none\" id =\"").concat(objDomDetect.domSvgDown, "\">\n            ").concat(window.OT_SVG_TIKTOK.ot_svg_arrow_down, "\n          </div>\n          </div>\n            <div class = \"ot-attribute-event\" id = \"").concat(objDomDetect.domAttributePixelTrack, "\">\n            ").concat(response.code !== 200 && response.message ? "\n            <span style = \"color: #8B8B8B;\n            margin: 5px 0;\">ERROR</span>\n            <span><b>".concat(response.message, "</b></span>\n            ") : " ".concat(data.content_type && data.event !== 'Browse' ? "<span><b>content_type:</b> ".concat(data.content_type, "</span>") : '', "\n                ").concat(data.content_id ? "<span><b>content_id:</b> ".concat(data.content_id, "</span>") : '', "\n                ").concat(data.value ? "<span><b>value:</b>".concat(data.value, "</span>") : '', "\n                ").concat(data.content_name ? "<span><b>content_name:</b> ".concat(data.content_type, "</span>") : '', "\n                ").concat(data.currency ? "<span><b>currency: </b>".concat(data.currency, "</span>") : '', "\n                ").concat(data.contents ? "<span><b>contents:</b>".concat(JSON.stringify(data.contents), "</span>") : '', "\n                  <span><b>Page URL:</b> ").concat(data.url, "</span>"), "\n\n          </div>\n    </div>"));
    $(objDomDetect.domTitlePixelTrack).css('border-bottom', '1px solid #e4e4e4');
    $('#' + objDomDetect.domInformationEventStatus).click(function () {
      if ($('#' + objDomDetect.domAttributePixelTrack).css('display') == 'none') {
        //Open detail attribute
        $('#' + objDomDetect.domAttributePixelTrack).css('display', 'flex');
        $('#' + objDomDetect.domSvgLeft).css('display', 'none');
        $('#' + objDomDetect.domSvgDown).css('display', 'block');
      } else {
        //Close detail attribute
        $('#' + objDomDetect.domAttributePixelTrack).css('display', 'none');
        $('#' + objDomDetect.domSvgLeft).css('display', 'block');
        $('#' + objDomDetect.domSvgDown).css('display', 'none');
      }
    });
  }
  function sendBrowserUrlLog($, rootLinkTikTokPixel, shop) {
    'use strict';
  
    return new Promise(function (resolve) {
      $.ajax({
        type: 'GET',
        data: {
          shop: shop,
          url: window.location.href
        },
        url: "".concat(rootLinkTikTokPixel, "/api/external/browser-url-log"),
        dataType: 'json'
      }).done(function (result) {
        resolve(result.data);
      });
    });
  }
  
  //Detect cookies
  function otSetCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
    var expires = 'expires=' + d.toGMTString();
    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';
  }
  function otGetCookie(cname) {
    var name = cname + '=';
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return '';
  }
  function otSaveUrlToMongo($, url, shop) {
    'use strict';
  
    getIP().then(function (data) {
      var rootLinkFBPixelLog = 'https://apps2.omegatheme.com/shopify/facebook-pixel-event-log/api/';
      var ipRegex = /[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/;
      var ip = data.split('ip=')[1].split('\n')[0];
      return new Promise(function (resolve) {
        $.ajax({
          type: 'POST',
          data: {
            url: url,
            shop: shop,
            ip: ip,
            user_agent: window.navigator.userAgent
          },
          url: "".concat(rootLinkFBPixelLog, "url-logs"),
          dataType: 'json'
        }).done(function (result) {
          if (typeof result == 'string') {
            result = JSON.parse(result);
          }
          resolve(result);
        });
      });
    });
  }
  function otConvertPrice(number) {
    if (Number(number) % 1 !== 0) {
      return parseFloat(number).toFixed(2);
    } else {
      return number;
    }
  }
  function otGetDayOfTime(ms1, ms2) {
    return Math.ceil((ms2 - ms1) / (24 * 60 * 60 * 1000));
  }
  function isJsonString(str) {
    try {
      JSON.parse(str);
    } catch (e) {
      return false;
    }
    return true;
  }
  function otAddAttributeClickIdToOrder($, ttclid, is_accept_permission_write_orders) {
    var conditionAddAttribute = is_accept_permission_write_orders == 1;
    if (typeof ttclid !== 'undefined' && ttclid !== null && ttclid !== '' && conditionAddAttribute) {
      $.ajax({
        type: 'POST',
        url: '/cart/update.js',
        dataType: 'json',
        data: {
          attributes: {
            ot_ttclid: ttclid
          }
        }
      }).done(function (cart) {
        console.log('Add ttclid: ' + ttclid);
      });
    }
  }
  /******/ })()
  ;